// Values default to global values (evaluated when the mixins are called)
$v-button-background-color: null !default;
$v-button-bevel-style: null !default;
$v-button-bevel-depth: null !default;
$v-button-gradient-style: null !default;
$v-button-gradient-depth: null !default;
$v-button-shadow-style: null !default;
$v-button-shadow-depth: null !default;
$v-button-border-radius: null !default;
$v-button-unit-size: null !default;

// Simple properties have default values
$v-button-font-weight: 400 !default;
$v-button-cursor: pointer !default;
$v-enable-button-hover-style: true !default;
$v-button-border-width: $v-border-width !default;





@mixin v-valo-button ($primary-stylename: v-button) {
  .#{$primary-stylename} {
    @include v-valo-button-common-properties;
    @include v-valo-button-style;
  }
}





@mixin v-valo-button-common-properties {
  cursor: $v-button-cursor;
  font-weight: $v-button-font-weight;
  position: relative;

  // Generated element for :hover, :focus and :active styles
  &:after {
    content: "";
    position: absolute;
    top: -1px;
    right: -1px;
    bottom: -1px;
    left: -1px;
    border-radius: inherit;
    border: inherit;
    border-width: 0;
    @if $v-animations-enabled {
      @include transition(box-shadow 180ms, border 180ms);
    }
  }

  &.v-disabled {
    cursor: default;
    @include opacity(.7);
    
    &:after {
      display: none;
    }
  }

  // Vertical centering of icon and caption, independent of the height of the button
  @include vertical-align-guide($to-align: div, $pseudo-element: before);

  // Safari handles line-heights and vertical-alignments somewhat differently, so we need to adjust
  .v-sa &:before {
    height: 110%;
  }

  // ...and since Chrome is still being labeled as WebKit and as "Safari", we need to revert that
  // Firefox needs a bit of adjusting as well
  .v-ch &:before,
  .v-ff &:before {
    height: 105%;
  }
}





@mixin v-valo-button-size ($unit-size, $border-radius) {
  height: $unit-size;
  
  $padding-width: ceil($unit-size/2.4);
  $padding-width: $padding-width + ceil($border-radius/3);
  padding: 0 $padding-width;

  .v-icon {
    margin: 0 ceil($padding-width/5)/-1;
  }

  .v-icon + span:not(:empty) {
    margin-left: ceil($padding-width/1.5);
  }
}



@function v-valo-button-border-color ($context-color: $v-app-background-color, 
                                      $bevel-style: $v-bevel-style, $bevel-depth: $v-bevel-depth,
                                      $background-color: $v-button-background-color) {

  $background-color: $background-color or $v-app-background-color;

  $border-color: blend-darken($background-color, scale-color($context-color, $lightness: max(-50%, -$bevel-depth)));
  $border-color: scale-color($border-color, $saturation: -$bevel-depth);
  @if contains($bevel-style, shade, true) {
    $border-color: $border-color $border-color blend-multiply(transparentize(#000, max(0.9, 1-$bevel-depth/100%)), $border-color);
  }

  @return $border-color;
}




@mixin v-valo-button-style ($context-color: $v-app-background-color, 
                            $gradient-style: $v-button-gradient-style, $gradient-depth: $v-button-gradient-depth, 
                            $bevel-style: $v-button-bevel-style, $bevel-depth: $v-button-bevel-depth, 
                            $unit-size: $v-button-unit-size, $border-radius: $v-button-border-radius,
                            $background-color: $v-button-background-color) {

  // Set up variable defaults
  $background-color: $background-color or $v-app-background-color;
  $gradient-style: $gradient-style or $v-gradient-style;
  $gradient-depth: $gradient-depth or $v-gradient-depth;
  $bevel-style: $bevel-style or $v-bevel-style;
  $bevel-depth: $bevel-depth or $v-bevel-depth;
  $unit-size: $unit-size or $v-unit-size;
  $border-radius: $border-radius or $v-border-radius;
  
  @include v-valo-button-size($unit-size, $border-radius);

  border-radius: $border-radius;
  border: $v-button-border-width solid;
  border-color: v-valo-button-border-color($context-color, $bevel-style, $bevel-depth, $background-color);

  @include v-valo-gradient($background-color, $gradient-style, $gradient-depth);
  color: v-valo-font-color($background-color);

  box-shadow: v-valo-button-box-shadow($background-color, $bevel-style, $bevel-depth, $gradient-style, $gradient-depth);
  text-shadow: v-valo-button-text-shadow($background-color, $bevel-depth);
  
  @if $v-enable-button-hover-style {
    &:hover:after {
      @include v-valo-button-hover-style($background-color: $background-color);
    }
  }

  &:focus {
    outline: none;
    &:after {
      @include v-valo-button-focus-style($background-color: $background-color, $context-color: $context-color);
    }
  }

  &:active:after,
  &.v-pressed:after {
    @include v-valo-button-active-style($background-color: $background-color);
  }
  
}


@mixin v-valo-button-focus-style ($background-color: $v-app-background-color, $context-color: $v-app-background-color) {
  $focus-color: v-valo-focus-color($context-color: $context-color);
  
  @if color-luminance($focus-color) + 50 < color-luminance($background-color) {
    border: 1px solid $focus-color;
  }

  box-shadow: v-valo-focus-box-shadow($color: $focus-color);

  @if $v-animations-enabled {
    @include transition(none);
  }
}



@mixin v-valo-button-active-style ($background-color: $v-app-background-color) {
  $bg: blend-multiply(black(.5), $background-color);
  background-color: transparentize($bg, .9);
  
  .v-ie8 & {
    background-color: $bg;
    -ms-filter: alpha(opacity=10);
  }
}



@mixin v-valo-button-hover-style ($background-color: $v-app-background-color) {
  $bg: blend-overlay(white(.5), $background-color);
  background-color: transparentize($bg, .8);
  border: inherit;
  
  @if $v-animations-enabled {
    @include transition(none);
  }
  
  .v-ie8 & {
    background-color: $bg;
    -ms-filter: alpha(opacity=20);
  }
}




@mixin v-valo-button-borderless-style {
  border: none;
  box-shadow: none;
  background: transparent;
}



@function v-valo-button-box-shadow($background-color, $bevel-style: $v-bevel-style, $bevel-depth: $v-bevel-depth, $gradient-style: $v-gradient-style, $gradient-depth: $v-gradient-depth) {
  @return v-valo-bevel($background-color, $bevel-style, $bevel-depth, $gradient-style, $gradient-depth), v-valo-shadow();
  /*@if $emboss-style == none {
    @return none;

  } @else if $emboss-style == sharp {
    $bottom-color: blend-multiply(transparentize(#000, max(0, 1-($emboss-depth+$gradient-depth)/300%)), blend-overlay(transparentize(#000,1-(min(1,($emboss-depth+$gradient-depth)/200%))),$background-color));
    @return inset 0 -2px 0 $bottom-color;

  } @else if $emboss-style == soft {
    $box-shadow-offset: round(sqrt($emboss-depth/25%));
    $box-shadow-blur: floor(sqrt($emboss-depth/18%));
    $box-shadow-spread: min(round(sqrt($emboss-depth/100%)), $box-shadow-offset - $box-shadow-blur);

    $top-color: blend-overlay(transparentize(#fff,1-(min(1,$emboss-depth/100%+$gradient-depth/100%))),$background-color);
    $bottom-color: blend-multiply(transparentize(#000, max(0, 1-$gradient-depth/100%)), blend-overlay(transparentize(#000,1-(min(1,$emboss-depth/100%+$gradient-depth/100%))),$background-color));

    @return 0 round($emboss-depth/100%)+1px min(2,round($emboss-depth/15%))+px rgba(0,0,0,min($emboss-depth/200%,0.3)),
                inset 0 $box-shadow-offset+px $box-shadow-blur+px $box-shadow-spread+px $top-color,
                inset 0 (-$box-shadow-offset+px) $box-shadow-blur+px $box-shadow-spread+px transparentize($bottom-color, .8);
  }*/
}



@function v-valo-button-text-shadow($background-color, $bevel-depth: $v-bevel-depth) {
  @if is-dark-color($background-color) {
    @return 0 -1px 0 transparentize(darken($background-color, $bevel-depth), 1-($bevel-depth/100%));
  } @else {
    @return 0 1px 0 transparentize(lighten($background-color, $bevel-depth), 1-($bevel-depth/100%));
  } 
}
