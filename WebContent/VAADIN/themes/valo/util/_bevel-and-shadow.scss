@function v-valo-bevel ($color, $bevel-style: $v-bevel-style, $bevel-depth: $v-bevel-depth, 
												$gradient-style: $v-gradient-style, $gradient-depth: 0) {
	
	$color-stops: v-valo-gradient-color-stops($color, $gradient-style, $gradient-depth);

	$top-color: first(first($color-stops));
	$bottom-color: first(last($color-stops));

	$top-color: blend-softlight(scale-color($top-color, $lightness: $bevel-depth), lighten($top-color, 5%));
  $bottom-color: blend-multiply(rgba(scale-color($bottom-color, $lightness: max(-30%, -$bevel-depth)), $bevel-depth/120%), scale-color($bottom-color, $lightness: $bevel-depth/3));

	@return v-valo-replace-hilite-and-shade($bevel-style, $top-color, $bottom-color);
}



@function v-valo-shadow ($context-color: $v-app-background-color, $shadow-style: null, $shadow-depth: null) {
	$shadow-style: $shadow-style or $v-shadow-style;
	$shadow-depth: $shadow-depth or $v-shadow-depth;
	@return v-valo-replace-hilite-and-shade($shadow-style, rgba(#fff, $shadow-depth/100%), rgba(#000, $shadow-depth/100%));
}



@function v-valo-replace-hilite-and-shade($shadow-list, $hilite, $shade) {
	$new: null;

	// If the shadow-list only contains one shadow
	@if contains($shadow-list, hilite) or contains($shadow-list, shade) {
		$new: replace($shadow-list, hilite, $hilite);
		$new: replace($new, shade, $shade);
		@return $new;
	}

	// If there are multiple shadows in a list
	@each $part in $shadow-list {
		$part: replace($part, hilite, $hilite);
		$part: replace($part, shade, $shade);
		$new: $new, $part;
	}
	@return $new;
}
